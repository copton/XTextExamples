/*
* generated by Xtext
*/
grammar InternalConfig;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ch.ethz.inf.vs.akc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ch.ethz.inf.vs.akc.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import ch.ethz.inf.vs.akc.services.ConfigGrammarAccess;

}

@parser::members {

 	private ConfigGrammarAccess grammarAccess;
 	
    public InternalConfigParser(TokenStream input, IAstFactory factory, ConfigGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("ch/ethz/inf/vs/akc/parser/antlr/internal/InternalConfig.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Castle";	
   	}
   	
   	@Override
   	protected ConfigGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCastle
entryRuleCastle returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCastleRule(), currentNode); }
	 iv_ruleCastle=ruleCastle 
	 { $current=$iv_ruleCastle.current; } 
	 EOF 
;

// Rule Castle
ruleCastle returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'castle' 
    {
        createLeafNode(grammarAccess.getCastleAccess().getCastleKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCastleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCastleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'definitions:' 
    {
        createLeafNode(grammarAccess.getCastleAccess().getDefinitionsKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCastleAccess().getDefinitionsDefinitionParserRuleCall_3_0(), currentNode); 
	    }
		lv_definitions_3_0=ruleDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCastleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitions",
	        		lv_definitions_3_0, 
	        		"Definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'rules:' 
    {
        createLeafNode(grammarAccess.getCastleAccess().getRulesKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCastleAccess().getRulesRuleParserRuleCall_5_0(), currentNode); 
	    }
		lv_rules_5_0=ruleRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCastleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"rules",
	        		lv_rules_5_0, 
	        		"Rule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefinitionRule(), currentNode); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getThingParserRuleCall_0(), currentNode); 
    }
    this_Thing_0=ruleThing
    { 
        $current = $this_Thing_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getLocationParserRuleCall_1(), currentNode); 
    }
    this_Location_1=ruleLocation
    { 
        $current = $this_Location_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getActionParserRuleCall_2(), currentNode); 
    }
    this_Action_2=ruleAction
    { 
        $current = $this_Action_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleThing
entryRuleThing returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThingRule(), currentNode); }
	 iv_ruleThing=ruleThing 
	 { $current=$iv_ruleThing.current; } 
	 EOF 
;

// Rule Thing
ruleThing returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'thing' 
    {
        createLeafNode(grammarAccess.getThingAccess().getThingKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getThingAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'is tagged with' 
    {
        createLeafNode(grammarAccess.getThingAccess().getIsTaggedWithKeyword_2(), null); 
    }
(
(
		lv_tag_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getThingAccess().getTagINTTerminalRuleCall_3_0(), "tag"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tag",
	        		lv_tag_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLocation
entryRuleLocation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocationRule(), currentNode); }
	 iv_ruleLocation=ruleLocation 
	 { $current=$iv_ruleLocation.current; } 
	 EOF 
;

// Rule Location
ruleLocation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'location' 
    {
        createLeafNode(grammarAccess.getLocationAccess().getLocationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLocationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'is defined by scanner' 
    {
        createLeafNode(grammarAccess.getLocationAccess().getIsDefinedByScannerKeyword_2(), null); 
    }
(
(
		lv_scanner_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLocationAccess().getScannerINTTerminalRuleCall_3_0(), "scanner"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"scanner",
	        		lv_scanner_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'action' 
    {
        createLeafNode(grammarAccess.getActionAccess().getActionKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'plays' 
    {
        createLeafNode(grammarAccess.getActionAccess().getPlaysKeyword_2(), null); 
    }
(
(
		lv_file_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getActionAccess().getFileSTRINGTerminalRuleCall_3_0(), "file"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"file",
	        		lv_file_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRuleRule(), currentNode); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getRuleAccess().getIfKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRuleAccess().getThingThingCrossReference_1_0(), "thing"); 
	}

)
)	'enters' 
    {
        createLeafNode(grammarAccess.getRuleAccess().getEntersKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRuleAccess().getLocationLocationCrossReference_3_0(), "location"); 
	}

)
)	'then' 
    {
        createLeafNode(grammarAccess.getRuleAccess().getThenKeyword_4(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRuleAccess().getActionActionCrossReference_5_0(), "action"); 
	}

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


