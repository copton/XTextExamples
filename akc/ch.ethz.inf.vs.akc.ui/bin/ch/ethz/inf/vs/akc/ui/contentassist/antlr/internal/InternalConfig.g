/*
* generated by Xtext
*/
grammar InternalConfig;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package ch.ethz.inf.vs.akc.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ch.ethz.inf.vs.akc.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import ch.ethz.inf.vs.akc.services.ConfigGrammarAccess;

}

@parser::members {
 
 	private ConfigGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ConfigGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCastle
entryRuleCastle 
:
{ before(grammarAccess.getCastleRule()); }
	 ruleCastle
{ after(grammarAccess.getCastleRule()); } 
	 EOF 
;

// Rule Castle
ruleCastle
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastleAccess().getGroup()); }
(rule__Castle__Group__0)
{ after(grammarAccess.getCastleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinition
entryRuleDefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionAccess().getAlternatives()); }
(rule__Definition__Alternatives)
{ after(grammarAccess.getDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThing
entryRuleThing 
:
{ before(grammarAccess.getThingRule()); }
	 ruleThing
{ after(grammarAccess.getThingRule()); } 
	 EOF 
;

// Rule Thing
ruleThing
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThingAccess().getGroup()); }
(rule__Thing__Group__0)
{ after(grammarAccess.getThingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocation
entryRuleLocation 
:
{ before(grammarAccess.getLocationRule()); }
	 ruleLocation
{ after(grammarAccess.getLocationRule()); } 
	 EOF 
;

// Rule Location
ruleLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationAccess().getGroup()); }
(rule__Location__Group__0)
{ after(grammarAccess.getLocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Definition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getThingParserRuleCall_0()); }
	ruleThing
{ after(grammarAccess.getDefinitionAccess().getThingParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getLocationParserRuleCall_1()); }
	ruleLocation
{ after(grammarAccess.getDefinitionAccess().getLocationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getActionParserRuleCall_2()); }
	ruleAction
{ after(grammarAccess.getDefinitionAccess().getActionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Castle__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Castle__Group__0__Impl
	rule__Castle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getCastleKeyword_0()); }

	'castle' 

{ after(grammarAccess.getCastleAccess().getCastleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Castle__Group__1__Impl
	rule__Castle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getNameAssignment_1()); }
(rule__Castle__NameAssignment_1)
{ after(grammarAccess.getCastleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Castle__Group__2__Impl
	rule__Castle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getDefinitionsKeyword_2()); }

	'definitions:' 

{ after(grammarAccess.getCastleAccess().getDefinitionsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Castle__Group__3__Impl
	rule__Castle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getDefinitionsAssignment_3()); }
(rule__Castle__DefinitionsAssignment_3)*
{ after(grammarAccess.getCastleAccess().getDefinitionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Castle__Group__4__Impl
	rule__Castle__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getRulesKeyword_4()); }

	'rules:' 

{ after(grammarAccess.getCastleAccess().getRulesKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Castle__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Castle__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getRulesAssignment_5()); }
(rule__Castle__RulesAssignment_5)*
{ after(grammarAccess.getCastleAccess().getRulesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Thing__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Thing__Group__0__Impl
	rule__Thing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Thing__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThingAccess().getThingKeyword_0()); }

	'thing' 

{ after(grammarAccess.getThingAccess().getThingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Thing__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Thing__Group__1__Impl
	rule__Thing__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Thing__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThingAccess().getNameAssignment_1()); }
(rule__Thing__NameAssignment_1)
{ after(grammarAccess.getThingAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Thing__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Thing__Group__2__Impl
	rule__Thing__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Thing__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThingAccess().getIsTaggedWithKeyword_2()); }

	'is tagged with' 

{ after(grammarAccess.getThingAccess().getIsTaggedWithKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Thing__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Thing__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Thing__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThingAccess().getTagAssignment_3()); }
(rule__Thing__TagAssignment_3)
{ after(grammarAccess.getThingAccess().getTagAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Location__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__0__Impl
	rule__Location__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getLocationKeyword_0()); }

	'location' 

{ after(grammarAccess.getLocationAccess().getLocationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__1__Impl
	rule__Location__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getNameAssignment_1()); }
(rule__Location__NameAssignment_1)
{ after(grammarAccess.getLocationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__2__Impl
	rule__Location__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getIsDefinedByScannerKeyword_2()); }

	'is defined by scanner' 

{ after(grammarAccess.getLocationAccess().getIsDefinedByScannerKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getScannerAssignment_3()); }
(rule__Location__ScannerAssignment_3)
{ after(grammarAccess.getLocationAccess().getScannerAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActionKeyword_0()); }

	'action' 

{ after(grammarAccess.getActionAccess().getActionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getNameAssignment_1()); }
(rule__Action__NameAssignment_1)
{ after(grammarAccess.getActionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__2__Impl
	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getPlaysKeyword_2()); }

	'plays' 

{ after(grammarAccess.getActionAccess().getPlaysKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getFileAssignment_3()); }
(rule__Action__FileAssignment_3)
{ after(grammarAccess.getActionAccess().getFileAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getRuleAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getThingAssignment_1()); }
(rule__Rule__ThingAssignment_1)
{ after(grammarAccess.getRuleAccess().getThingAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getEntersKeyword_2()); }

	'enters' 

{ after(grammarAccess.getRuleAccess().getEntersKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLocationAssignment_3()); }
(rule__Rule__LocationAssignment_3)
{ after(grammarAccess.getRuleAccess().getLocationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getRuleAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getActionAssignment_5()); }
(rule__Rule__ActionAssignment_5)
{ after(grammarAccess.getRuleAccess().getActionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Castle__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCastleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__DefinitionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getDefinitionsDefinitionParserRuleCall_3_0()); }
	ruleDefinition{ after(grammarAccess.getCastleAccess().getDefinitionsDefinitionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Castle__RulesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastleAccess().getRulesRuleParserRuleCall_5_0()); }
	ruleRule{ after(grammarAccess.getCastleAccess().getRulesRuleParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Thing__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThingAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getThingAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Thing__TagAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThingAccess().getTagINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getThingAccess().getTagINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLocationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__ScannerAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getScannerINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getLocationAccess().getScannerINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__FileAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getFileSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getActionAccess().getFileSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ThingAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getThingThingCrossReference_1_0()); }
(
{ before(grammarAccess.getRuleAccess().getThingThingIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRuleAccess().getThingThingIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRuleAccess().getThingThingCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__LocationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLocationLocationCrossReference_3_0()); }
(
{ before(grammarAccess.getRuleAccess().getLocationLocationIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getRuleAccess().getLocationLocationIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getRuleAccess().getLocationLocationCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getActionActionCrossReference_5_0()); }
(
{ before(grammarAccess.getRuleAccess().getActionActionIDTerminalRuleCall_5_0_1()); }
	RULE_ID{ after(grammarAccess.getRuleAccess().getActionActionIDTerminalRuleCall_5_0_1()); }
)
{ after(grammarAccess.getRuleAccess().getActionActionCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


